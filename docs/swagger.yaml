basePath: /
definitions:
  controllers.HealthResponse:
    properties:
      service:
        example: linkedin-watcher
        type: string
      status:
        example: ok
        type: string
      timestamp:
        example: "2024-01-01T00:00:00Z"
        type: string
      uptime:
        example: 1h30m45s
        type: string
      version:
        example: 1.0.0
        type: string
    type: object
  models.AuthResponse:
    properties:
      access_token:
        type: string
      refresh_token:
        type: string
      user:
        $ref: '#/definitions/models.UserInfo'
    type: object
  models.PasswordChangeRequest:
    properties:
      current_password:
        type: string
      new_password:
        minLength: 8
        type: string
    required:
    - current_password
    - new_password
    type: object
  models.RefreshTokenRequest:
    properties:
      refresh_token:
        type: string
    required:
    - refresh_token
    type: object
  models.UserInfo:
    properties:
      auth_type:
        type: string
      email:
        type: string
      name:
        type: string
    type: object
  models.UserLogin:
    properties:
      email:
        type: string
      password:
        type: string
    required:
    - email
    - password
    type: object
  models.UserRegistration:
    properties:
      email:
        type: string
      name:
        type: string
      password:
        minLength: 8
        type: string
    required:
    - email
    - name
    - password
    type: object
host: localhost:8000
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: Use your email and password for basic authentication.
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
  termsOfService: http://swagger.io/terms/
  title: LinkedIn Watcher API
  version: "1.0"
paths:
  /auth/change-password:
    post:
      consumes:
      - application/json
      description: Change user password
      parameters:
      - description: Password change data
        in: body
        name: password_change
        required: true
        schema:
          $ref: '#/definitions/models.PasswordChangeRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Change password
      tags:
      - auth
  /auth/login:
    post:
      consumes:
      - application/json
      description: Login user with email and password (supports both JSON body and
        HTTP Basic Auth)
      parameters:
      - description: User login data (optional if using Basic Auth)
        in: body
        name: user
        schema:
          $ref: '#/definitions/models.UserLogin'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.AuthResponse'
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
      security:
      - BasicAuth: []
      summary: Login user
      tags:
      - auth
  /auth/logout:
    post:
      description: Logout user (client should discard tokens)
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Logout user
      tags:
      - auth
  /auth/refresh:
    post:
      consumes:
      - application/json
      description: Refresh access token using refresh token
      parameters:
      - description: Refresh token
        in: body
        name: refresh_token
        required: true
        schema:
          $ref: '#/definitions/models.RefreshTokenRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.AuthResponse'
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
      summary: Refresh access token
      tags:
      - auth
  /auth/register:
    post:
      consumes:
      - application/json
      description: Register a new user with email and password
      parameters:
      - description: User registration data
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.UserRegistration'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.AuthResponse'
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "409":
          description: Conflict
          schema:
            additionalProperties: true
            type: object
      summary: Register a new user
      tags:
      - auth
  /health:
    get:
      consumes:
      - application/json
      description: Returns the health status of the application
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controllers.HealthResponse'
      summary: Health check endpoint
      tags:
      - health
securityDefinitions:
  BasicAuth:
    type: basic
  BearerAuth:
    description: Type "Bearer" followed by a space and JWT token.
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
